{"version":3,"sources":["utils/id.ts","api/importImages.ts","utils/imageProxy.ts","components/Picture/index.tsx","components/Spinner/index.tsx","contexts/Settings.tsx","containers/Form/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Math","random","toString","url","fetch","then","response","contentType","headers","get","includes","json","blob","data","galleryImages","Array","isArray","map","item","id","type","img","Image","src","URL","createObjectURL","Promise","resolve","reject","addEventListener","width","naturalWidth","height","naturalHeight","Error","imageProxy","source","props","encodeURIComponent","default","Object","keys","key","join","Picture","alt","className","params","imgSource","webpSource","output","srcSet","Spinner","Settings","React","createContext","defaultUrl","document","location","href","rowMaxHeight","changeRowMaxHeight","value","maxWidth","changeMaxWidth","minWidth","changeMinWidth","Form","onImport","useContext","SettingsContext","onSubmit","event","preventDefault","urlElement","querySelector","importImages","images","catch","error","alert","console","htmlFor","name","pattern","required","defaultValue","onChange","Number","target","Gallery","lazy","App","useState","setImages","setRowMaxHeight","setMaxWidth","setMinWidth","useEffect","Provider","Boolean","length","style","Suspense","fallback","options","gap","grid","top","left","object","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ae6eceec.chunk.js","sourcesContent":["export default (): string => `f${(Math.random() * 1e8).toString(16)}`;\n","import { ImageType } from 'src/types/Image';\nimport id from 'src/utils/id';\n\ntype API = {\n  galleryImages: ImageType[];\n};\n\nexport default (url: string): Promise<ImageType[]> =>\n  fetch(url)\n    .then((response) => {\n      const contentType = response.headers.get('content-type');\n\n      return contentType && contentType.includes('application/json') ? response.json() : response.blob();\n    })\n    .then((data) => {\n      if (data.galleryImages && Array.isArray(data.galleryImages)) {\n        const { galleryImages } = data as API;\n\n        return [...galleryImages.map((item) => ({ id: id(), ...item }))];\n      }\n\n      if (data.type.includes('image')) {\n        const img = new Image();\n\n        img.src = URL.createObjectURL(data);\n\n        return new Promise((resolve, reject) => {\n          img.addEventListener('load', () => {\n            resolve([{ url, id: id(), width: img.naturalWidth, height: img.naturalHeight }]);\n          });\n          img.addEventListener('error', reject);\n        });\n      }\n\n      throw new Error(data.type);\n    });\n","import { Query } from 'src/types/Query';\n\n/**\n * Сериализация объекта для get-запроса\n * @param data объект параметров\n */\nexport const parameters = (data: Query): string =>\n  Object.keys(data)\n    .map((key) => `${key}=${data[key]}`)\n    .join('&');\n\n/**\n * Прокси-сервер изображений weserv.nl\n * @param source url изображения\n * @param props объект параметров\n */\nexport const imageProxy = (source: string, props?: Query): string =>\n  `//images.weserv.nl/?${parameters({\n    ...((url): Query => ({\n      url,\n      default: url,\n    }))(encodeURIComponent(source)),\n    ...props,\n  })}`;\n","import React from 'react';\nimport { Query } from 'src/types/Query';\nimport { imageProxy } from 'src/utils/imageProxy';\n\nexport interface PictureProps extends React.HTMLAttributes<HTMLElement> {\n  src: string;\n  alt: string;\n  width?: number;\n  height?: number;\n  params?: Query;\n}\n\nconst Picture: React.FC<PictureProps> = ({ src, alt, width, height, className, params, ...props }) => {\n  const imgSource = imageProxy(src, params);\n  const webpSource = imageProxy(src, {\n    ...params,\n    output: 'webp',\n  });\n\n  return (\n    <picture className={className} {...props}>\n      <source srcSet={webpSource} type=\"image/webp\" />\n      <img src={imgSource} alt={alt} width={width} height={height} />\n    </picture>\n  );\n};\n\nexport default Picture;\n","import './styles.scss';\n\nimport React from 'react';\n\nexport const Spinner = (): JSX.Element => <div className=\"spinner\" />;\n\nexport default Spinner;\n","import React from 'react';\n\nexport const Settings = React.createContext({\n  defaultUrl: `${document.location.href}/frontend-test-task/gallery-images.json`,\n  rowMaxHeight: 0,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  changeRowMaxHeight: (value: number) => {},\n  maxWidth: 0,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  changeMaxWidth: (value: number) => {},\n  minWidth: 0,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  changeMinWidth: (value: number) => {},\n});\n\nexport default Settings;\n","import './styles.scss';\n\nimport React, { useContext } from 'react';\nimport importImages from 'src/api/importImages';\nimport SettingsContext from 'src/contexts/Settings';\n\ntype FormProps = {\n  onImport: Function;\n};\n\nexport const Form = ({\n  onImport,\n  className,\n  ...props\n}: FormProps & React.HTMLAttributes<HTMLFormElement>): JSX.Element => {\n  const {\n    defaultUrl,\n    rowMaxHeight,\n    changeRowMaxHeight,\n    maxWidth,\n    changeMaxWidth,\n    minWidth,\n    changeMinWidth,\n  } = useContext(SettingsContext);\n  const onSubmit = (event: React.SyntheticEvent): void => {\n    event.preventDefault();\n    const urlElement = document.querySelector<HTMLInputElement>('#url');\n    const url = urlElement ? urlElement.value : '';\n\n    importImages(url)\n      .then((images) => onImport(images))\n      .catch((error: Error) => {\n        alert(error);\n        return console.error(error);\n      });\n  };\n\n  return (\n    <form className={`form${className ? ` ${className}` : ''}`} {...props} onSubmit={onSubmit}>\n      <fieldset className=\"form__fieldset\">\n        <legend>Import</legend>\n        <div className=\"form__group\">\n          <label className=\"form__label\" htmlFor=\"url\">\n            <input\n              className=\"form__input\"\n              type=\"url\"\n              name=\"url\"\n              id=\"url\"\n              pattern=\"https?://.+\"\n              required\n              defaultValue={defaultUrl}\n            />\n          </label>\n          <button className=\"form__button\" type=\"submit\">\n            Upload\n          </button>\n        </div>\n      </fieldset>\n      <fieldset className=\"form__fieldset\">\n        <legend>Settings</legend>\n        <div className=\"form__group\">\n          <label className=\"form__label\" htmlFor=\"rowMaxHeight\">\n            <span className=\"form__label_text\">Row max height</span>\n            <input\n              className=\"form__input\"\n              type=\"number\"\n              id=\"rowMaxHeight\"\n              required\n              defaultValue={rowMaxHeight}\n              onChange={(event): void => changeRowMaxHeight(Number(event.target.value))}\n            />\n          </label>\n          <label className=\"form__label\" htmlFor=\"maxWidth\">\n            <span className=\"form__label_text\">Max width</span>\n            <input\n              className=\"form__input\"\n              type=\"number\"\n              id=\"maxWidth\"\n              required\n              defaultValue={maxWidth}\n              onChange={(event): void => changeMaxWidth(Number(event.target.value))}\n            />\n          </label>\n          <label className=\"form__label\" htmlFor=\"minWidth\">\n            <span className=\"form__label_text\">Min width</span>\n            <input\n              className=\"form__input\"\n              type=\"number\"\n              id=\"minWidth\"\n              required\n              defaultValue={minWidth}\n              onChange={(event): void => changeMinWidth(Number(event.target.value))}\n            />\n          </label>\n        </div>\n      </fieldset>\n    </form>\n  );\n};\n\nexport default Form;\n","import './App.scss';\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport importImages from 'src/api/importImages';\nimport Picture from 'src/components/Picture';\nimport Loader from 'src/components/Spinner';\nimport FormSettings from 'src/containers/Form';\nimport SettingsContext from 'src/contexts/Settings';\nimport { ImageType } from 'src/types/Image';\nimport { Cell } from 'src/utils/grid';\n\nconst Gallery = React.lazy(() => import('src/components/Gallery'));\n\nexport const App = (): JSX.Element => {\n  const { defaultUrl } = useContext(SettingsContext);\n  const [images, setImages] = useState<ImageType[]>([]);\n  const [rowMaxHeight, setRowMaxHeight] = useState<number>(250);\n  const changeRowMaxHeight = (value: number): void => setRowMaxHeight(value);\n  const [maxWidth, setMaxWidth] = useState<number>(860);\n  const changeMaxWidth = (value: number): void => setMaxWidth(value);\n  const [minWidth, setMinWidth] = useState<number>(320);\n  const changeMinWidth = (value: number): void => setMinWidth(value);\n\n  useEffect(() => {\n    importImages(defaultUrl)\n      .then((response) => setImages(response))\n      .catch((error: Error) => console.error(error));\n  }, [defaultUrl]);\n\n  return (\n    <div className=\"app\">\n      <SettingsContext.Provider\n        value={{ defaultUrl, rowMaxHeight, changeRowMaxHeight, maxWidth, changeMaxWidth, minWidth, changeMinWidth }}\n      >\n        <FormSettings className=\"app__form\" onImport={(data: ImageType[]): void => setImages([...data, ...images])} />\n        {Boolean(images.length) && (\n          <div className=\"app__gallery\" style={{ maxWidth: `${maxWidth}px`, minWidth: `${minWidth}px` }}>\n            <React.Suspense fallback={<Loader />}>\n              <Gallery\n                images={images}\n                options={{\n                  rowMaxHeight,\n                  gap: 4,\n                }}\n                width={maxWidth}\n              >\n                {(grid: Array<Cell<ImageType>>): Array<JSX.Element> =>\n                  grid.map(({ top, left, height, width, object }) => (\n                    <Picture\n                      className=\"gallery__item\"\n                      key={object.id}\n                      style={{ left, top }}\n                      src={object.url}\n                      alt={object.alt || ''}\n                      height={height}\n                      width={width}\n                      // params={{\n                      //   height: rowMaxHeight,\n                      // }}\n                    />\n                  ))\n                }\n              </Gallery>\n            </React.Suspense>\n          </div>\n        )}\n      </SettingsContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport './index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Application from 'src/App';\nimport * as serviceWorker from 'src/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Application />\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}