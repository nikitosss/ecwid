{"version":3,"sources":["utils/id.ts","api/importImages.ts","components/Spinner/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Math","random","toString","url","fetch","then","response","contentType","headers","get","includes","json","blob","data","galleryImages","Array","isArray","map","item","id","type","img","Image","src","URL","createObjectURL","Promise","resolve","reject","addEventListener","width","naturalWidth","height","naturalHeight","Error","Spinner","className","Gallery","React","lazy","defaultUrl","document","location","origin","App","useState","images","setImages","rowMaxHeight","setRowMaxHeight","maxWidth","setMaxWidth","minWidth","setMinWidth","useEffect","importImages","catch","error","console","onSubmit","event","preventDefault","urlElement","querySelector","value","alert","htmlFor","name","pattern","required","defaultValue","onChange","Number","target","min","max","Boolean","length","style","Suspense","fallback","options","gap","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.61cddbc5.chunk.js","sourcesContent":["export default (): string => `f${(Math.random() * 1e8).toString(16)}`;\n","import { ImageType } from 'src/types/Image';\nimport id from 'src/utils/id';\n\ntype API = {\n  galleryImages: ImageType[];\n};\n\nexport default (url: string): Promise<ImageType[]> =>\n  fetch(url)\n    .then((response) => {\n      const contentType = response.headers.get('content-type');\n\n      return contentType && contentType.includes('application/json') ? response.json() : response.blob();\n    })\n    .then((data) => {\n      if (data.galleryImages && Array.isArray(data.galleryImages)) {\n        const { galleryImages } = data as API;\n\n        return [...galleryImages.map((item) => ({ id: id(), ...item }))];\n      }\n\n      if (data.type.includes('image')) {\n        const img = new Image();\n\n        img.src = URL.createObjectURL(data);\n\n        return new Promise((resolve, reject) => {\n          img.addEventListener('load', () => {\n            resolve([{ url, id: id(), width: img.naturalWidth, height: img.naturalHeight }]);\n          });\n          img.addEventListener('error', reject);\n        });\n      }\n\n      throw new Error(data.type);\n    });\n","import './styles.scss';\n\nimport React from 'react';\n\nexport const Spinner = (): JSX.Element => <div className=\"spinner\" />;\n\nexport default Spinner;\n","import './App.scss';\n\nimport React, { useEffect, useState } from 'react';\nimport importImages from 'src/api/importImages';\nimport Loader from 'src/components/Spinner';\nimport { ImageType } from 'src/types/Image';\n\nconst Gallery = React.lazy(() => import('src/components/Gallery'));\n\nconst defaultUrl = `${document.location.origin}/frontend-test-task/gallery-images.json`;\n\nexport const App = (): JSX.Element => {\n  const [images, setImages] = useState<ImageType[]>([]);\n  const [rowMaxHeight, setRowMaxHeight] = useState<number>(162);\n  const [maxWidth, setMaxWidth] = useState<number>(860);\n  const [minWidth, setMinWidth] = useState<number>(320);\n  const onSubmit = (event: React.SyntheticEvent): void => {\n    event.preventDefault();\n    const urlElement = document.querySelector<HTMLInputElement>('#url');\n    const url = urlElement ? urlElement.value : '';\n\n    importImages(url)\n      .then((response) => setImages([...response, ...images]))\n      .catch((error: Error) => {\n        alert(error);\n        return console.error(error);\n      });\n  };\n\n  useEffect(() => {\n    importImages(defaultUrl)\n      .then((response) => setImages(response))\n      .catch((error: Error) => console.error(error));\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <form className=\"app__form\" onSubmit={onSubmit}>\n        <fieldset className=\"app__fieldset\">\n          <legend>Импорот</legend>\n          <div className=\"app__group\">\n            <label className=\"app__label\" htmlFor=\"url\">\n              <input\n                className=\"app__input\"\n                type=\"url\"\n                name=\"url\"\n                id=\"url\"\n                pattern=\"https?://.+\"\n                required\n                defaultValue={defaultUrl}\n              />\n            </label>\n            <button className=\"app__button\" type=\"submit\">\n              Submit\n            </button>\n          </div>\n        </fieldset>\n        <fieldset className=\"app__fieldset\">\n          <legend>Настройки</legend>\n          <div className=\"app__group\">\n            <label className=\"app__label\" htmlFor=\"rowMaxHeight\">\n              <span className=\"app__label_text\">Row max height</span>\n              <input\n                className=\"app__input\"\n                type=\"number\"\n                id=\"rowMaxHeight\"\n                required\n                defaultValue={rowMaxHeight}\n                onChange={(event): void => setRowMaxHeight(Number(event.target.value))}\n              />\n            </label>\n            <label className=\"app__label\" htmlFor=\"maxWidth\">\n              <span className=\"app__label_text\">Max width</span>\n              <input\n                className=\"app__input\"\n                type=\"number\"\n                id=\"maxWidth\"\n                required\n                min={minWidth}\n                defaultValue={maxWidth}\n                onChange={(event): void => setMaxWidth(Number(event.target.value))}\n              />\n            </label>\n            <label className=\"app__label\" htmlFor=\"minWidth\">\n              <span className=\"app__label_text\">Min width</span>\n              <input\n                className=\"app__input\"\n                type=\"number\"\n                id=\"minWidth\"\n                required\n                max={maxWidth}\n                defaultValue={minWidth}\n                onChange={(event): void => setMinWidth(Number(event.target.value))}\n              />\n            </label>\n          </div>\n        </fieldset>\n      </form>\n      {Boolean(images.length) && (\n        <div className=\"app__gallery\" style={{ maxWidth: `${maxWidth}px`, minWidth: `${minWidth}px` }}>\n          <React.Suspense fallback={<Loader />}>\n            <Gallery\n              images={images}\n              options={{\n                rowMaxHeight,\n                gap: 4,\n              }}\n              width={maxWidth}\n            />\n          </React.Suspense>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport './index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Application from 'src/App';\nimport * as serviceWorker from 'src/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Application />\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}