{"version":3,"sources":["utils/id.ts","api/importImages.ts","components/Spinner/index.tsx","contexts/Settings.tsx","containers/Form/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Math","random","toString","url","fetch","then","response","contentType","headers","get","includes","json","blob","data","galleryImages","Array","isArray","map","item","id","type","img","Image","src","URL","createObjectURL","Promise","resolve","reject","addEventListener","width","naturalWidth","height","naturalHeight","Error","Spinner","className","state","defaultUrl","document","location","href","rowMaxHeight","changeRowMaxHeight","value","maxWidth","changeMaxWidth","minWidth","changeMinWidth","Settings","React","createContext","b","cn","Form","onImport","props","useContext","SettingsContext","useState","setUrl","onSubmit","event","a","preventDefault","importImages","images","console","error","alert","undefined","htmlFor","name","pattern","required","defaultValue","onChange","target","disabled","Number","Gallery","lazy","App","setImages","setRowMaxHeight","setMaxWidth","setMinWidth","useEffect","catch","Provider","Boolean","length","style","Suspense","fallback","options","gap","window","hostname","match","ReactDOM","render","StrictMode","querySelector","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ce883d1d.chunk.js","sourcesContent":["/**\n * Генерация ID\n */\nexport default (): string => `f${(Math.random() * 1e8).toString(16)}`;\n","import { ImageType } from 'src/types/Image';\nimport id from 'src/utils/id';\n\ntype API = {\n  galleryImages: ImageType[];\n};\n\nexport default (url: string): Promise<ImageType[]> =>\n  fetch(url)\n    .then((response) => {\n      const contentType = response.headers.get('content-type');\n\n      return contentType && contentType.includes('application/json') ? response.json() : response.blob();\n    })\n    .then((data) => {\n      if (data.galleryImages && Array.isArray(data.galleryImages)) {\n        const { galleryImages } = data as API;\n\n        return [...galleryImages.map((item) => ({ id: id(), ...item }))];\n      }\n\n      if (data.type.includes('image')) {\n        const img = new Image();\n\n        img.src = URL.createObjectURL(data);\n\n        return new Promise((resolve, reject) => {\n          img.addEventListener('load', () => {\n            resolve([{ url, id: id(), width: img.naturalWidth, height: img.naturalHeight }]);\n          });\n          img.addEventListener('error', reject);\n        });\n      }\n\n      throw new Error(data.type);\n    });\n","import './styles.scss';\n\nimport React from 'react';\n\nexport const Spinner = (): JSX.Element => <div className=\"spinner\" />;\n\nexport default Spinner;\n","import React from 'react';\n\nconst state = {\n  defaultUrl: `${document.location.href}/frontend-test-task/gallery-images.json`,\n  rowMaxHeight: 0,\n  changeRowMaxHeight(value: number) {\n    state.rowMaxHeight = value;\n  },\n  maxWidth: 0,\n  changeMaxWidth(value: number) {\n    state.maxWidth = value;\n  },\n  minWidth: 0,\n  changeMinWidth(value: number) {\n    state.minWidth = value;\n  },\n};\n\nexport const Settings = React.createContext(state);\n\nexport default Settings;\n","import './styles.scss';\n\nimport { cn } from '@bem-react/classname';\nimport React, { useContext, useState } from 'react';\nimport importImages from 'src/api/importImages';\nimport SettingsContext from 'src/contexts/Settings';\nimport { ImageType } from 'src/types/Image';\n\ntype FormProps = {\n  onImport: (images: ImageType[]) => void;\n};\n\nconst b = cn('form');\n\nexport const Form = ({\n  onImport,\n  className,\n  ...props\n}: FormProps & React.HTMLAttributes<HTMLFormElement>): JSX.Element => {\n  const {\n    defaultUrl,\n    rowMaxHeight,\n    changeRowMaxHeight,\n    maxWidth,\n    changeMaxWidth,\n    minWidth,\n    changeMinWidth,\n  } = useContext(SettingsContext);\n  const [url, setUrl] = useState<string>(defaultUrl);\n  const onSubmit = async (event: React.SyntheticEvent): Promise<void> => {\n    event.preventDefault();\n\n    try {\n      const images = await importImages(url);\n      onImport(images);\n    } catch (error) {\n      console.error(error);\n      alert(error);\n    }\n  };\n\n  return (\n    <form className={b(undefined, [className])} {...props} onSubmit={onSubmit}>\n      <fieldset className={b('fieldset')}>\n        <legend>Import</legend>\n        <div className={b('group')}>\n          <label className={b('label')} htmlFor=\"url\">\n            <input\n              className={b('input')}\n              type=\"url\"\n              name=\"url\"\n              id=\"url\"\n              pattern=\"https?://.+\"\n              required\n              defaultValue={defaultUrl}\n              onChange={(event): void => setUrl(event.target.value)}\n            />\n          </label>\n          <button className={b('button')} type=\"submit\" disabled={!url}>\n            Upload\n          </button>\n        </div>\n      </fieldset>\n      <fieldset className={b('fieldset')}>\n        <legend>Settings</legend>\n        <div className={b('group')}>\n          <label className={b('label')} htmlFor=\"rowMaxHeight\">\n            <span className={b('labelText')}>Row max height</span>\n            <input\n              className={b('input')}\n              type=\"number\"\n              id=\"rowMaxHeight\"\n              required\n              defaultValue={rowMaxHeight}\n              onChange={(event): void => changeRowMaxHeight(Number(event.target.value))}\n            />\n          </label>\n          <label className={b('label')} htmlFor=\"maxWidth\">\n            <span className={b('labelText')}>Max width</span>\n            <input\n              className={b('input')}\n              type=\"number\"\n              id=\"maxWidth\"\n              required\n              defaultValue={maxWidth}\n              onChange={(event): void => changeMaxWidth(Number(event.target.value))}\n            />\n          </label>\n          <label className={b('label')} htmlFor=\"minWidth\">\n            <span className={b('labelText')}>Min width</span>\n            <input\n              className={b('input')}\n              type=\"number\"\n              id=\"minWidth\"\n              required\n              defaultValue={minWidth}\n              onChange={(event): void => changeMinWidth(Number(event.target.value))}\n            />\n          </label>\n        </div>\n      </fieldset>\n    </form>\n  );\n};\n\nexport default Form;\n","import './App.scss';\n\nimport { cn } from '@bem-react/classname';\nimport React, { useContext, useEffect, useState } from 'react';\nimport importImages from 'src/api/importImages';\nimport Loader from 'src/components/Spinner';\nimport FormSettings from 'src/containers/Form';\nimport SettingsContext from 'src/contexts/Settings';\nimport { ImageType } from 'src/types/Image';\n\nconst Gallery = React.lazy(() => import('src/components/Gallery'));\n\nconst b = cn('app');\n\nexport const App = (): JSX.Element => {\n  const { defaultUrl } = useContext(SettingsContext);\n  const [images, setImages] = useState<ImageType[]>([]);\n  const [rowMaxHeight, setRowMaxHeight] = useState<number>(250);\n  const changeRowMaxHeight = (value: number): void => setRowMaxHeight(value);\n  const [maxWidth, setMaxWidth] = useState<number>(860);\n  const changeMaxWidth = (value: number): void => setMaxWidth(value);\n  const [minWidth, setMinWidth] = useState<number>(320);\n  const changeMinWidth = (value: number): void => setMinWidth(value);\n\n  useEffect(() => {\n    importImages(defaultUrl)\n      .then((response) => setImages(response))\n      .catch((error: Error) => console.error(error));\n  }, [defaultUrl]);\n\n  return (\n    <section className={b()}>\n      <SettingsContext.Provider\n        value={{ defaultUrl, rowMaxHeight, changeRowMaxHeight, maxWidth, changeMaxWidth, minWidth, changeMinWidth }}\n      >\n        <header className={b('header')}>\n          <FormSettings\n            className={b('settings')}\n            onImport={(data: ImageType[]): void => setImages([...data, ...images])}\n          />\n        </header>\n        {Boolean(images.length) && (\n          <div className={b('main')} style={{ maxWidth: `${maxWidth}px`, minWidth: `${minWidth}px` }}>\n            <React.Suspense fallback={<Loader />}>\n              <Gallery\n                images={images}\n                options={{\n                  rowMaxHeight,\n                  gap: 4,\n                }}\n                width={maxWidth}\n              />\n            </React.Suspense>\n          </div>\n        )}\n      </SettingsContext.Provider>\n    </section>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport './index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Application from 'src/App';\nimport * as serviceWorker from 'src/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Application />\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}